package com.example.demo.controllers;

import com.example.demo.services.AdminService;
import com.example.demo.services.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/users")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;
    private final AdminService adminService;

    /**
     * –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
     */
    @PutMapping("/change-password")
    public ResponseEntity<String> changePassword(
            Authentication authentication,
            @RequestBody Map<String, String> passwordData) { // –ü—Ä–∏–Ω–∏–º–∞–µ–º JSON

        String oldPassword = passwordData.get("oldPassword");
        String newPassword = passwordData.get("newPassword");
        System.out.println("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: " + passwordData);
        System.out.println("üîç oldPassword = " + passwordData.get("oldPassword"));
        System.out.println("üîç newPassword = " + passwordData.get("newPassword"));

        System.out.println("üîç UserService –≤ UserController –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º changePassword(): " + userService);
        System.out.println("üîç –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–Ω—ã–π userService: " + userService);
        System.out.println("üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç Spring Security: " + SecurityContextHolder.getContext());


        userService.changePassword(authentication.getName(), oldPassword, newPassword);
        return ResponseEntity.ok("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω");
    }


    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¢–æ–ª—å–∫–æ ADMIN)
     */
    @GetMapping("/all")
    @PreAuthorize("hasAuthority('ADMIN')")
    public ResponseEntity<List<String>> getAllUsers() {
        return ResponseEntity.ok(adminService.getAllUsers());
    }
}