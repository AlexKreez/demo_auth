package com.example.demo.security.jwt;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.IOException;

@Component
public class JwtAuthFilter extends OncePerRequestFilter {//OncePerRequestFilter, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
//  –≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ JWT-—Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
//  –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
//  –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
//  –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    private final JwtService jwtService;
    private final UserDetailsService userDetailsService;
    private static final Logger LOGGER = LoggerFactory.getLogger(JwtAuthFilter.class);

    public JwtAuthFilter(JwtService jwtService, UserDetailsService userDetailsService) {
        this.jwtService = jwtService;
        this.userDetailsService = userDetailsService;
    }

    @Override
    protected void doFilterInternal(@NonNull HttpServletRequest request,
                                    @NonNull HttpServletResponse response,
                                    @NonNull FilterChain filterChain) throws ServletException, IOException {
        LOGGER.info("üîç –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {}", request.getServletPath());

        final String authHeader = request.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            LOGGER.warn("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization");
            filterChain.doFilter(request, response);
            return;
        }

        final String jwt = authHeader.substring(7); //–£–¥–∞–ª—è–µ–º Bearer (7 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–æ–∫–µ–Ω
        final String userLogin = jwtService.extractUsername(jwt);


        if (userLogin != null && SecurityContextHolder.getContext().getAuthentication() == null) {
//              –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ UserDetailsService
//              –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω (jwtService.isTokenValid())
//              –ï—Å–ª–∏ –¥–∞, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ UsernamePasswordAuthenticationToken –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SecurityContext
            UserDetails userDetails = userDetailsService.loadUserByUsername(userLogin);
            if (jwtService.isTokenValid(jwt, userDetails)) {
                LOGGER.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{}' –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Å —Ä–æ–ª—è–º–∏: {}", userDetails.getUsername(), userDetails.getAuthorities());
                UsernamePasswordAuthenticationToken authToken =
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                SecurityContextHolder.getContext().setAuthentication(authToken);
            } else {
                LOGGER.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω");
            }
        } else {
            LOGGER.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω");
        }

        filterChain.doFilter(request, response);
    }
}
