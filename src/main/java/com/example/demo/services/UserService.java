package com.example.demo.services;

import com.example.demo.domain.entityUser.User;
import com.example.demo.domain.entityUser.UserRole;
import com.example.demo.repository.UserRepository;
import com.example.demo.repository.UserRoleRepository;
import com.example.demo.security.jwt.JwtService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;


@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;
    private final UserRoleRepository userRoleRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final AuthenticationManager authenticationManager;

    @Transactional
    public User registerUser(String login, String password, String email) {
        if (userRepository.findByLogin(login).isPresent()) {
            throw new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        User user = new User();
        user.setLogin(login);
        user.setPassword(passwordEncoder.encode(password));
        user.setEmail(email);

        User savedUser = userRepository.save(user);
        System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: " + savedUser.getId());

        UserRole userRole = new UserRole(savedUser, "USER");
        userRoleRepository.save(userRole);
        System.out.println("‚úÖ –†–æ–ª—å USER –≤—ã–¥–∞–Ω–∞: " + savedUser.getLogin());

        return savedUser;
    }

    public String authenticateUser(String login, String password) {
        System.out.println("üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: " + login);



        User user = userRepository.findByLogin(login)
                .orElseThrow(() -> new IllegalArgumentException("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));


        // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω
        if ("admin".equals(login)) {
            String existingToken = jwtService.findExistingTokenForUser(user);
            if (existingToken != null) {
                System.out.println("‚úÖ –£ `admin` —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ");
                return existingToken;
            }
        }

        if (!passwordEncoder.matches(password, user.getPassword())) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + login);
            throw new BadCredentialsException("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
        }
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(login, password)
        );

        return jwtService.generateToken(user);
    }
}
